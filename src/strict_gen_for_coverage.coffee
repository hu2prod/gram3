# WARNING!!! AUTOGENERATED with gen_strict.coffee
module = @
{
  Tokenizer
  Token_parser
} = require './tokenizer'
tokenizer = new Tokenizer
tokenizer.parser_list.push (new Token_parser 'dollar_id', /^\$[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'hash_id', /^\#[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'pass_id', /^\@[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'id', /^[_a-z][_a-z0-9]*/i)
tokenizer.parser_list.push (new Token_parser '_bin_op', /// ^ (
  (&&?|\|\|?|[-+*/])|
  <>|[<>!=]=|<|>
) ///)
tokenizer.parser_list.push (new Token_parser '_pre_op', /^!/)
# tokenizer.parser_list.push (new Token_parser 'assign_bin_op', /^(&&?|\|\|?|[-+])?=/)
tokenizer.parser_list.push (new Token_parser 'bracket', /^[\[\]\(\)\{\}]/)
tokenizer.parser_list.push (new Token_parser 'delimiter', /^[:.]/)



string_regex_craft = ///
    \\[^xu] |               # x and u are case sensitive while hex letters are not
    \\x[0-9a-fA-F]{2} |     # Hexadecimal escape sequence
    \\u(?:
      [0-9a-fA-F]{4} |      # Unicode escape sequence
      \{(?:
        [0-9a-fA-F]{1,5} |  # Unicode code point escapes from 0 to FFFFF
        10[0-9a-fA-F]{4}    # Unicode code point escapes from 100000 to 10FFFF
      )\}
    )
///.toString().replace(/\//g,'')
single_quoted_regex_craft = ///
  (?:
    [^\\] |
    #{string_regex_craft}
  )*?
///.toString().replace(/\//g,'')
tokenizer.parser_list.push (new Token_parser 'string_literal_singleq'      , /// ^  ' #{single_quoted_regex_craft} '    ///)
double_quoted_regexp_craft = ///
  (?:
    [^\\#] |
    \#(?!\{) |
    #{string_regex_craft}
  )*?
///.toString().replace(/\//g,'')
tokenizer.parser_list.push (new Token_parser 'string_literal_doubleq'      , /// ^  " #{double_quoted_regexp_craft} "    ///)

tokenizer.parser_list.push (new Token_parser 'number', /^[0-9]+/)

# ###################################################################################################
#    gram
# ###################################################################################################

require 'fy'
STATE_NA = 0
STATE_RQ = 1 # REQ
STATE_IG = 2 # REQ_IGNORE
STATE_FL = 3 # REQ_FILL
state_stub = []
for i in [0 ... 12]
  state_stub.push STATE_NA
counter_stub = []
for i in [0 ... 76]
  counter_stub.push 0

hash_key_list = [
  "_",
  "pre_op",
  "bin_op",
  "access_rvalue",
  "dollar_id",
  "hash_id",
  "rvalue",
  "number",
  "id",
  "string_literal_singleq",
  "string_literal_doubleq",
  "strict_rule"
]

class @Parser
  length: 0
  cache : []
  state : []
  counter: []
  Node  : null
  proxy : null
  proxy2: null
  
  go : (token_list_list)->
    @cache= []
    @state= []
    @counter= []
    @length = token_list_list.length
    return [] if @length == 0
    @Node = token_list_list[0]?[0]?.constructor
    @proxy= new @Node
    @proxy2= new @Node
    for token_list,idx in token_list_list
      stub = new Array 62
      for k in [0 ... 62]
        stub[k] = []
      for token in token_list
        token.a = idx
        token.b = idx+1
        if -1 != stub_idx = hash_key_list.idx token.mx_hash.hash_key
          stub[stub_idx].push token
        stub[0].upush token
      @cache.push stub
      @state.push state_stub.slice()
      @counter.push counter_stub.slice()
    
    # one const rule opt
    for token_list,idx in token_list_list
      token = token_list[0]
      continue if token.value != "!"
      
      node = new @Node
      node.value_array.push token
      # COPYPASTE
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash = {}
      mx_hash_stub.rule = "rule_XX_priorityE1__u1"
      
      mx_hash_stub.hash_key = "pre_op"
      mx_hash_stub.hash_key_idx = 1
      mx_hash_stub["priority"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      # TODO у ret могут быть и другие правила, потому не надо сразу засырать cache
      _pos_list = @cache[idx]
      if !_pos_list[1]?
        _pos_list[1] = []
      _pos_list[1].push node
    
    for token_list,idx in token_list_list
      token = token_list[0]
      continue if token.value != "-"
      
      node = new @Node
      node.value_array.push token
      # COPYPASTE
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash = {}
      mx_hash_stub.rule = "rule_XX_priorityE1__u2"
      
      mx_hash_stub.hash_key = "pre_op"
      mx_hash_stub.hash_key_idx = 1
      mx_hash_stub["priority"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      # TODO у ret могут быть и другие правила, потому не надо сразу засырать cache
      _pos_list = @cache[idx]
      if !_pos_list[1]?
        _pos_list[1] = []
      _pos_list[1].push node
    
    for token_list,idx in token_list_list
      token = token_list[0]
      continue if token.value != "+"
      
      node = new @Node
      node.value_array.push token
      # COPYPASTE
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash = {}
      mx_hash_stub.rule = "rule_XP_priorityE1__u3"
      
      mx_hash_stub.hash_key = "pre_op"
      mx_hash_stub.hash_key_idx = 1
      mx_hash_stub["priority"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      # TODO у ret могут быть и другие правила, потому не надо сразу засырать cache
      _pos_list = @cache[idx]
      if !_pos_list[1]?
        _pos_list[1] = []
      _pos_list[1].push node
    
    
    @fsm()
    list = @cache[0][11]
    max_token = token_list_list.length
    
    filter_list = []
    for v in list
      if v.b == max_token
        @node_fix v
        filter_list.push v
    # Прим. А все ошибки, почему не прошло ... смотрим и анализируем @cache
    filter_list
  
  node_fix : (node)->
    walk = (node)->
      vv_list = []
      for v in node.value_array
        walk v
        vv_list.push v.value_view or v.value
      node.value_view = vv_list.join ' '
      return
    walk node
    return

  fsm : ()->
    FAcache = @cache
    FAstate = @state
    FAcounter = @counter
    stack = [
      [
        11
        0
        0
      ]
    ]
    FAstate[0][11] = STATE_RQ
    length = @length
    request_make = (token_hki, pos, is_new)->
      state = FAstate[pos][token_hki]
      switch state
        when 0 # STATE_NA
          if is_new
            ### !pragma coverage-skip-block ###
            throw new Error 'invalid call. STATE_NA + is_new'
          stack.push [token_hki, pos, is_new]
          FAstate[pos][token_hki] = STATE_RQ
          return true
        when 1 # STATE_RQ
          FAstate[pos][token_hki] = STATE_IG
          return false
        when 2 # STATE_IG
          # stack.push [token_hki, pos, is_new]
          return false
        when 3 # STATE_FL
          FAstate[pos][token_hki] = STATE_RQ
          stack.push [token_hki, pos, is_new]
          return true
      return
    # TODO remove
    safe_collect = (dst, src)->
      # TODO hash[candidate.b] optimization
      # Вместо того, чтобы проходить всегда можно спросить а есть ли такой длинны уже найденый токен
      # И хранить можно hash или массив b и быстро спрашивать по надобности
      # В случае хэша, там же можно хранить только токены такой длинны
      for candidate in src
        found = false
        for chk in dst
          # continue if chk.b != candidate.b
          c_varr = candidate.value_array
          continue if chk.value_array.length != c_varr.length
          match = true
          for chk_v,idx in chk.value_array
            if chk_v != c_varr[idx]
              match = false
              break
          if match
            found = true
            break
        if !found
          dst.push candidate
      return
    
    while cur = stack.pop()
      [
        hki
        start_pos
        only_new
      ] = cur
      continue if start_pos >= length
      
      switch hki
        when 0
          ### token__ queue ###
          stack.push [
            12
            start_pos
            only_new
          ]
        when 12
          ### token__ collect ###
          node_list = []
          
          FAstate[start_pos][0] = STATE_FL
          FAcache[start_pos][0].uappend node_list
        
        when 1
          ### token_pre_op queue ###
          stack.push [
            13
            start_pos
            only_new
          ]
        when 13
          ### token_pre_op collect ###
          node_list = []
          
          FAstate[start_pos][1] = STATE_FL
          FAcache[start_pos][1].uappend node_list
        
        when 2
          ### token_bin_op queue ###
          stack.push [
            22
            start_pos
            only_new
          ]
          ### rule_XSXXX_priorityE5__right_assocE1__u4 ###
          stack.push [
            14
            start_pos
            only_new
          ]
          ### rule_XPXXX_priorityE6__right_assocE1__u5 ###
          stack.push [
            16
            start_pos
            only_new
          ]
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 ###
          stack.push [
            18
            start_pos
            only_new
          ]
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 ###
          stack.push [
            20
            start_pos
            only_new
          ]
        when 22
          ### token_bin_op collect ###
          node_list = []
          ### rule_XSXXX_priorityE5__right_assocE1__u4 ###
          node_list.append FAcache[start_pos][14]
          ### rule_XPXXX_priorityE6__right_assocE1__u5 ###
          node_list.append FAcache[start_pos][16]
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 ###
          node_list.append FAcache[start_pos][18]
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 ###
          node_list.append FAcache[start_pos][20]
          FAstate[start_pos][2] = STATE_FL
          FAcache[start_pos][2].uappend node_list
        
        when 3
          ### token_access_rvalue queue ###
          stack.push [
            29
            start_pos
            only_new
          ]
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 ###
          stack.push [
            23
            start_pos
            only_new
          ]
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 ###
          stack.push [
            25
            start_pos
            only_new
          ]
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 ###
          stack.push [
            27
            start_pos
            only_new
          ]
        when 29
          ### token_access_rvalue collect ###
          node_list = []
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 ###
          node_list.append FAcache[start_pos][23]
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 ###
          node_list.append FAcache[start_pos][25]
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 ###
          node_list.append FAcache[start_pos][27]
          FAstate[start_pos][3] = STATE_FL
          FAcache[start_pos][3].uappend node_list
        
        when 4
          ### token_dollar_id queue ###
          stack.push [
            30
            start_pos
            only_new
          ]
        when 30
          ### token_dollar_id collect ###
          node_list = []
          
          FAstate[start_pos][4] = STATE_FL
          FAcache[start_pos][4].uappend node_list
        
        when 5
          ### token_hash_id queue ###
          stack.push [
            31
            start_pos
            only_new
          ]
        when 31
          ### token_hash_id collect ###
          node_list = []
          
          FAstate[start_pos][5] = STATE_FL
          FAcache[start_pos][5].uappend node_list
        
        when 6
          ### token_rvalue queue ###
          stack.push [
            54
            start_pos
            only_new
          ]
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 ###
          stack.push [
            32
            start_pos
            only_new
          ]
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 ###
          stack.push [
            34
            start_pos
            only_new
          ]
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 ###
          stack.push [
            36
            start_pos
            only_new
          ]
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 ###
          stack.push [
            38
            start_pos
            only_new
          ]
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 ###
          stack.push [
            40
            start_pos
            only_new
          ]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 ###
          stack.push [
            42
            start_pos
            only_new
          ]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 ###
          stack.push [
            44
            start_pos
            only_new
          ]
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 ###
          stack.push [
            46
            start_pos
            only_new
          ]
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 ###
          stack.push [
            48
            start_pos
            only_new
          ]
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 ###
          stack.push [
            50
            start_pos
            only_new
          ]
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 ###
          stack.push [
            52
            start_pos
            only_new
          ]
        when 54
          ### token_rvalue collect ###
          node_list = []
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 ###
          node_list.append FAcache[start_pos][32]
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 ###
          node_list.append FAcache[start_pos][34]
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 ###
          node_list.append FAcache[start_pos][36]
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 ###
          node_list.append FAcache[start_pos][38]
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 ###
          node_list.append FAcache[start_pos][40]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 ###
          node_list.append FAcache[start_pos][42]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 ###
          node_list.append FAcache[start_pos][44]
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 ###
          node_list.append FAcache[start_pos][46]
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 ###
          node_list.append FAcache[start_pos][48]
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 ###
          node_list.append FAcache[start_pos][50]
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 ###
          node_list.append FAcache[start_pos][52]
          append_list = FAcache[start_pos][6]
          has_new = false
          for node in node_list
            if append_list.has node
              node._is_new = false
            else
              node._is_new = true
              append_list.push node
              has_new = true
          
          state = FAstate[start_pos][6]
          FAstate[start_pos][6] = STATE_FL
          if state == STATE_IG
            if has_new
              # recursive case
              FAstate[start_pos][6] = STATE_RQ
              stack.push [
                6
                start_pos
                1
              ]
              request_make 6, start_pos, 1
          
        
        when 7
          ### token_number queue ###
          stack.push [
            55
            start_pos
            only_new
          ]
        when 55
          ### token_number collect ###
          node_list = []
          
          FAstate[start_pos][7] = STATE_FL
          FAcache[start_pos][7].uappend node_list
        
        when 8
          ### token_id queue ###
          stack.push [
            56
            start_pos
            only_new
          ]
        when 56
          ### token_id collect ###
          node_list = []
          
          FAstate[start_pos][8] = STATE_FL
          FAcache[start_pos][8].uappend node_list
        
        when 9
          ### token_string_literal_singleq queue ###
          stack.push [
            57
            start_pos
            only_new
          ]
        when 57
          ### token_string_literal_singleq collect ###
          node_list = []
          
          FAstate[start_pos][9] = STATE_FL
          FAcache[start_pos][9].uappend node_list
        
        when 10
          ### token_string_literal_doubleq queue ###
          stack.push [
            58
            start_pos
            only_new
          ]
        when 58
          ### token_string_literal_doubleq collect ###
          node_list = []
          
          FAstate[start_pos][10] = STATE_FL
          FAcache[start_pos][10].uappend node_list
        
        when 11
          ### token_strict_rule queue ###
          stack.push [
            61
            start_pos
            only_new
          ]
          ### rule_Hrvalue_ultEdeep__u22 ###
          stack.push [
            59
            start_pos
            only_new
          ]
        when 61
          ### token_strict_rule collect ###
          node_list = []
          ### rule_Hrvalue_ultEdeep__u22 ###
          node_list.append FAcache[start_pos][59]
          FAstate[start_pos][11] = STATE_FL
          FAcache[start_pos][11].uappend node_list
        
        when 14
          ### rule_XSXXX_priorityE5__right_assocE1__u4 queue ###
          chk_len = stack.push [
            14
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][0] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "*"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][1] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "/"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 15
        when 15
          ### rule_XSXXX_priorityE5__right_assocE1__u4 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][2] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "*"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][2] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][3] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "/"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][3] = list_1.length
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XSXXX_priorityE5__right_assocE1__u4"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 5
            mx_hash_stub["right_assoc"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.length -= tok_list.length
          
          FAcache[start_pos][14].append ret_list
          #safe_collect FAcache[start_pos][14], ret_list
        when 16
          ### rule_XPXXX_priorityE6__right_assocE1__u5 queue ###
          chk_len = stack.push [
            16
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][4] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "+"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][5] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "-"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 17
        when 17
          ### rule_XPXXX_priorityE6__right_assocE1__u5 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][6] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "+"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][6] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][7] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "-"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][7] = list_1.length
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XPXXX_priorityE6__right_assocE1__u5"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 6
            mx_hash_stub["right_assoc"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.length -= tok_list.length
          
          FAcache[start_pos][16].append ret_list
          #safe_collect FAcache[start_pos][16], ret_list
        when 18
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 queue ###
          chk_len = stack.push [
            18
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][8] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '<'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][9] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '<='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][10] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][11] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '>='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][12] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '!='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][13] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '<>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][14] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '=='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 19
        when 19
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][15] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '<'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][15] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][16] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '<='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][16] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][17] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][17] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][18] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '>='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][18] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][19] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '!='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][19] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][20] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '<>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][20] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][21] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '=='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][21] = list_1.length
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 9
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.length -= tok_list.length
          
          FAcache[start_pos][18].append ret_list
          #safe_collect FAcache[start_pos][18], ret_list
        when 20
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 queue ###
          chk_len = stack.push [
            20
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][22] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][23] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '&&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][24] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '|'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][25] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '||'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 21
        when 21
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][26] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][26] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][27] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '&&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][27] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][28] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '|'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][28] = list_1.length
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][29] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != '||'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          FAcounter[b_0][29] = list_1.length
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 10
            mx_hash_stub["right_assoc"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.length -= tok_list.length
          
          FAcache[start_pos][20].append ret_list
          #safe_collect FAcache[start_pos][20], ret_list
        when 23
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 queue ###
          chk_len = stack.push [
            23
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][4]
          if state_1 != STATE_FL
            if request_make 4, b_0, 0
              continue
          list_1 = FAcache[b_0][4]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 24
        when 24
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][4]
          for idx_1 in [FAcounter[b_0][30] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8"
            
            mx_hash_stub.hash_key = "access_rvalue"
            mx_hash_stub.hash_key_idx = 3
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "dollar_id"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][30] = list_1.length
          
          FAcache[start_pos][23].append ret_list
          #safe_collect FAcache[start_pos][23], ret_list
        when 25
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 queue ###
          chk_len = stack.push [
            25
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][5]
          if state_1 != STATE_FL
            if request_make 5, b_0, 0
              continue
          list_1 = FAcache[b_0][5]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 26
        when 26
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][5]
          for idx_1 in [FAcounter[b_0][31] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hhash_id_priorityEX9000_ultEhash_id__u9"
            
            mx_hash_stub.hash_key = "access_rvalue"
            mx_hash_stub.hash_key_idx = 3
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "hash_id"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][31] = list_1.length
          
          FAcache[start_pos][25].append ret_list
          #safe_collect FAcache[start_pos][25], ret_list
        when 27
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 queue ###
          chk_len = stack.push [
            27
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][5]
          if state_1 != STATE_FL
            if request_make 5, b_0, 0
              continue
          list_1 = FAcache[b_0][5]
          for idx_1 in [FAcounter[b_0][33] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              state_3 = FAstate[b_2][7]
              if state_3 != STATE_FL
                if request_make 7, b_2, 0
                  continue
              list_3 = FAcache[b_2][7]
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 28
        when 28
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][5]
          for idx_1 in [FAcounter[b_0][37] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              list_3 = FAcache[b_2][7]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                if b_3 >= length
                  node.value_array.pop()
                  continue
                list_4 = FAcache[b_3][0]
                for tok in list_4
                  continue if tok.value != "]"
                  b_4 = tok.b
                  node.value_array.push tok
                  
                  arg_list = node.value_array
                  
                  
                  mx_hash_stub = node.mx_hash = {}
                  mx_hash_stub.rule = "rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19"
                  
                  mx_hash_stub.hash_key = "access_rvalue"
                  mx_hash_stub.hash_key_idx = 3
                  mx_hash_stub["priority"] = -9000
                  mx_hash_stub["ult"] = "hash_array_access"
                  
                  node.b = node.value_array.last().b
                  
                  ret_list.push node.clone()
                  
                  node.value_array.pop()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcounter[b_0][37] = list_1.length
          
          FAcache[start_pos][27].append ret_list
          #safe_collect FAcache[start_pos][27], ret_list
        when 32
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 queue ###
          chk_len = stack.push [
            32
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][3]
          if state_1 != STATE_FL
            if request_make 3, b_0, 0
              continue
          list_1 = FAcache[b_0][3]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 33
        when 33
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][3]
          for idx_1 in [FAcounter[b_0][38] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "access_rvalue"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][38] = list_1.length
          
          FAcache[start_pos][32].append ret_list
          #safe_collect FAcache[start_pos][32], ret_list
        when 34
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 queue ###
          chk_len = stack.push [
            34
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][7]
          if state_1 != STATE_FL
            if request_make 7, b_0, 0
              continue
          list_1 = FAcache[b_0][7]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 35
        when 35
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][7]
          for idx_1 in [FAcounter[b_0][39] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hnumber_priorityEX9000_ultEvalue__u11"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "value"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][39] = list_1.length
          
          FAcache[start_pos][34].append ret_list
          #safe_collect FAcache[start_pos][34], ret_list
        when 36
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 queue ###
          chk_len = stack.push [
            36
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][8]
          if state_1 != STATE_FL
            if request_make 8, b_0, 0
              continue
          list_1 = FAcache[b_0][8]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 37
        when 37
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][8]
          for idx_1 in [FAcounter[b_0][40] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hid_priorityEX9000_ultEwrap_string__u12"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "wrap_string"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][40] = list_1.length
          
          FAcache[start_pos][36].append ret_list
          #safe_collect FAcache[start_pos][36], ret_list
        when 38
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 queue ###
          chk_len = stack.push [
            38
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][9]
          if state_1 != STATE_FL
            if request_make 9, b_0, 0
              continue
          list_1 = FAcache[b_0][9]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 39
        when 39
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][9]
          for idx_1 in [FAcounter[b_0][41] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "value"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][41] = list_1.length
          
          FAcache[start_pos][38].append ret_list
          #safe_collect FAcache[start_pos][38], ret_list
        when 40
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 queue ###
          chk_len = stack.push [
            40
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][10]
          if state_1 != STATE_FL
            if request_make 10, b_0, 0
              continue
          list_1 = FAcache[b_0][10]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 41
        when 41
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][10]
          for idx_1 in [FAcounter[b_0][42] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "value"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][42] = list_1.length
          
          FAcache[start_pos][40].append ret_list
          #safe_collect FAcache[start_pos][40], ret_list
        when 42
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 queue ###
          chk_len = stack.push [
            42
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][6]
          if state_1 != STATE_FL
            if request_make 6, b_0, 0
              continue
          list_1 = FAcache[b_0][6]
          for idx_1 in [FAcounter[b_0][44] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            state_2 = FAstate[b_1][2]
            if state_2 != STATE_FL
              if request_make 2, b_1, 0
                continue
            list_2 = FAcache[b_1][2]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              state_3 = FAstate[b_2][6]
              if state_3 != STATE_FL
                if request_make 6, b_2, 0
                  continue
              list_3 = FAcache[b_2][6]
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 43
        when 43
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][6]
          for idx_1 in [FAcounter[b_0][47] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][2]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              list_3 = FAcache[b_2][6]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                if !((arg_list[0].mx_hash.priority<arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                if !((arg_list[2].mx_hash.priority<arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = arg_list[1].mx_hash.priority
                mx_hash_stub["ult"] = "bin_op"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcounter[b_0][47] = list_1.length
          
          FAcache[start_pos][42].append ret_list
          #safe_collect FAcache[start_pos][42], ret_list
        when 44
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 queue ###
          chk_len = stack.push [
            44
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][6]
          if state_1 != STATE_FL
            if request_make 6, b_0, 0
              continue
          list_1 = FAcache[b_0][6]
          for idx_1 in [FAcounter[b_0][49] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            state_2 = FAstate[b_1][2]
            if state_2 != STATE_FL
              if request_make 2, b_1, 0
                continue
            list_2 = FAcache[b_1][2]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              state_3 = FAstate[b_2][6]
              if state_3 != STATE_FL
                if request_make 6, b_2, 0
                  continue
              list_3 = FAcache[b_2][6]
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 45
        when 45
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][6]
          for idx_1 in [FAcounter[b_0][52] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][2]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              list_3 = FAcache[b_2][6]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                if !((arg_list[0].mx_hash.priority==arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                if !((arg_list[2].mx_hash.priority<arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                if !(arg_list[1].mx_hash.right_assoc)
                  node.value_array.pop()
                  continue
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = arg_list[1].mx_hash.priority
                mx_hash_stub["ult"] = "bin_op"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcounter[b_0][52] = list_1.length
          
          FAcache[start_pos][44].append ret_list
          #safe_collect FAcache[start_pos][44], ret_list
        when 46
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 queue ###
          chk_len = stack.push [
            46
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][1]
          if state_1 != STATE_FL
            if request_make 1, b_0, 0
              continue
          list_1 = FAcache[b_0][1]
          for idx_1 in [FAcounter[b_0][53] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            state_2 = FAstate[b_1][6]
            if state_2 != STATE_FL
              if request_make 6, b_1, 0
                continue
            list_2 = FAcache[b_1][6]
            
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 47
        when 47
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][1]
          for idx_1 in [FAcounter[b_0][55] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][6]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              arg_list = node.value_array
              if !((arg_list[1].mx_hash.priority<=arg_list[0].mx_hash.priority))
                node.value_array.pop()
                continue
              
              mx_hash_stub = node.mx_hash = {}
              mx_hash_stub.rule = "rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17"
              
              mx_hash_stub.hash_key = "rvalue"
              mx_hash_stub.hash_key_idx = 6
              mx_hash_stub["priority"] = arg_list[0].mx_hash.priority
              mx_hash_stub["ult"] = "pre_op"
              
              node.b = node.value_array.last().b
              
              ret_list.push node.clone()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcounter[b_0][55] = list_1.length
          
          FAcache[start_pos][46].append ret_list
          #safe_collect FAcache[start_pos][46], ret_list
        when 48
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 queue ###
          chk_len = stack.push [
            48
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][56] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "("
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            state_2 = FAstate[b_1][6]
            if state_2 != STATE_FL
              if request_make 6, b_1, 0
                continue
            list_2 = FAcache[b_1][6]
            
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 49
        when 49
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][0]
          for idx_1 in [FAcounter[b_0][59] ... list_1.length] by 1
            tok = list_1[idx_1]
            continue if tok.value != "("
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][6]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              list_3 = FAcache[b_2][0]
              for tok in list_3
                continue if tok.value != ")"
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = -9000
                mx_hash_stub["ult"] = "bra"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcounter[b_0][59] = list_1.length
          
          FAcache[start_pos][48].append ret_list
          #safe_collect FAcache[start_pos][48], ret_list
        when 50
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 queue ###
          chk_len = stack.push [
            50
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][3]
          if state_1 != STATE_FL
            if request_make 3, b_0, 0
              continue
          list_1 = FAcache[b_0][3]
          for idx_1 in [FAcounter[b_0][63] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              state_3 = FAstate[b_2][7]
              if state_3 != STATE_FL
                if request_make 7, b_2, 0
                  continue
              list_3 = FAcache[b_2][7]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                if b_3 >= length
                  node.value_array.pop()
                  continue
                list_4 = FAcache[b_3][0]
                for tok in list_4
                  continue if tok.value != ":"
                  b_4 = tok.b
                  node.value_array.push tok
                  
                  if b_4 >= length
                    node.value_array.pop()
                    continue
                  state_5 = FAstate[b_4][7]
                  if state_5 != STATE_FL
                    if request_make 7, b_4, 0
                      continue
                  list_5 = FAcache[b_4][7]
                  
                  
                  node.value_array.pop()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 51
        when 51
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][3]
          for idx_1 in [FAcounter[b_0][69] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              list_3 = FAcache[b_2][7]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                if b_3 >= length
                  node.value_array.pop()
                  continue
                list_4 = FAcache[b_3][0]
                for tok in list_4
                  continue if tok.value != ":"
                  b_4 = tok.b
                  node.value_array.push tok
                  
                  if b_4 >= length
                    node.value_array.pop()
                    continue
                  list_5 = FAcache[b_4][7]
                  for tok in list_5
                    
                    b_5 = tok.b
                    node.value_array.push tok
                    
                    if b_5 >= length
                      node.value_array.pop()
                      continue
                    list_6 = FAcache[b_5][0]
                    for tok in list_6
                      continue if tok.value != "]"
                      b_6 = tok.b
                      node.value_array.push tok
                      
                      arg_list = node.value_array
                      
                      
                      mx_hash_stub = node.mx_hash = {}
                      mx_hash_stub.rule = "rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20"
                      
                      mx_hash_stub.hash_key = "rvalue"
                      mx_hash_stub.hash_key_idx = 6
                      mx_hash_stub["priority"] = -9000
                      mx_hash_stub["ult"] = "slice_access"
                      
                      node.b = node.value_array.last().b
                      
                      ret_list.push node.clone()
                      
                      node.value_array.pop()
                    
                    node.value_array.pop()
                  
                  node.value_array.pop()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcounter[b_0][69] = list_1.length
          
          FAcache[start_pos][50].append ret_list
          #safe_collect FAcache[start_pos][50], ret_list
        when 52
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 queue ###
          chk_len = stack.push [
            52
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][3]
          if state_1 != STATE_FL
            if request_make 3, b_0, 0
              continue
          list_1 = FAcache[b_0][3]
          for idx_1 in [FAcounter[b_0][71] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "."
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              state_3 = FAstate[b_2][8]
              if state_3 != STATE_FL
                if request_make 8, b_2, 0
                  continue
              list_3 = FAcache[b_2][8]
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 53
        when 53
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][3]
          for idx_1 in [FAcounter[b_0][74] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            if b_1 >= length
              node.value_array.pop()
              continue
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "."
              b_2 = tok.b
              node.value_array.push tok
              
              if b_2 >= length
                node.value_array.pop()
                continue
              list_3 = FAcache[b_2][8]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = -9000
                mx_hash_stub["ult"] = "field_access"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcounter[b_0][74] = list_1.length
          
          FAcache[start_pos][52].append ret_list
          #safe_collect FAcache[start_pos][52], ret_list
        when 59
          ### rule_Hrvalue_ultEdeep__u22 queue ###
          chk_len = stack.push [
            59
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          
          state_1 = FAstate[b_0][6]
          if state_1 != STATE_FL
            if request_make 6, b_0, 0
              continue
          list_1 = FAcache[b_0][6]
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 60
        when 60
          ### rule_Hrvalue_ultEdeep__u22 collect ###
          ret_list = []
          b_0 = start_pos
          node = @proxy2
          node.value_array.clear()
          node.a = start_pos
          
          list_1 = FAcache[b_0][6]
          for idx_1 in [FAcounter[b_0][75] ... list_1.length] by 1
            tok = list_1[idx_1]
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hrvalue_ultEdeep__u22"
            
            mx_hash_stub.hash_key = "strict_rule"
            mx_hash_stub.hash_key_idx = 11
            mx_hash_stub["ult"] = "deep"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            node.value_array.pop()
          FAcounter[b_0][75] = list_1.length
          
          FAcache[start_pos][59].append ret_list
          #safe_collect FAcache[start_pos][59], ret_list
    
    return

# ###################################################################################################
parser = new module.Parser

@parse = (str)->
  tok_list = tokenizer.go str
  res_list = parser.go tok_list

# debug
@tokenizer = tokenizer
@parser = parser
