# WARNING!!! AUTOGENERATED with gen_strict.coffee
module = @
{
  Tokenizer
  Token_parser
} = require './tokenizer'
tokenizer = new Tokenizer
tokenizer.parser_list.push (new Token_parser 'dollar_id', /^\$[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'hash_id', /^\#[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'pass_id', /^\@[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'id', /^[_a-z][_a-z0-9]*/i)
tokenizer.parser_list.push (new Token_parser '_bin_op', /// ^ (
  (&&?|\|\|?|[-+*/])|
  <>|[<>!=]=|<|>
) ///)
tokenizer.parser_list.push (new Token_parser '_pre_op', /^!/)
# tokenizer.parser_list.push (new Token_parser 'assign_bin_op', /^(&&?|\|\|?|[-+])?=/)
tokenizer.parser_list.push (new Token_parser 'bracket', /^[\[\]\(\)\{\}]/)
tokenizer.parser_list.push (new Token_parser 'delimiter', /^[:.]/)



string_regex_craft = ///
    \\[^xu] |               # x and u are case sensitive while hex letters are not
    \\x[0-9a-fA-F]{2} |     # Hexadecimal escape sequence
    \\u(?:
      [0-9a-fA-F]{4} |      # Unicode escape sequence
      \{(?:
        [0-9a-fA-F]{1,5} |  # Unicode code point escapes from 0 to FFFFF
        10[0-9a-fA-F]{4}    # Unicode code point escapes from 100000 to 10FFFF
      )\}
    )
///.toString().replace(/\//g,'')
single_quoted_regex_craft = ///
  (?:
    [^\\] |
    #{string_regex_craft}
  )*?
///.toString().replace(/\//g,'')
tokenizer.parser_list.push (new Token_parser 'string_literal_singleq'      , /// ^  ' #{single_quoted_regex_craft} '    ///)
double_quoted_regexp_craft = ///
  (?:
    [^\\#] |
    \#(?!\{) |
    #{string_regex_craft}
  )*?
///.toString().replace(/\//g,'')
tokenizer.parser_list.push (new Token_parser 'string_literal_doubleq'      , /// ^  " #{double_quoted_regexp_craft} "    ///)

tokenizer.parser_list.push (new Token_parser 'number', /^[0-9]+/)

# ###################################################################################################
#    gram
# ###################################################################################################

require 'fy'
{Node} = require "./node"
class Hypothesis
  a : 0
  b : 0
  ret_hash : ''
  list : []
  _is_new : false
  constructor : ()->
    @list = []
  
  clone : ()->
    ret = new Hypothesis
    ret.a = @a
    ret.b = @b
    ret.ret_hash = @ret_hash
    ret.list = @list.clone()
    ret._is_new = @_is_new
    ret
  
  push   : (proxy_node)->
    @list.push proxy_node
    @b = proxy_node.token.b
    if @list.length == 1
      @_is_new = proxy_node.token._is_new
    return
  

class @Parser
  cache     : []
  drop      : []
  constructor : ()->
  
  go : (token_list_list)->
    @cache = []
    @drop  = []
    for token_list,idx in token_list_list
      stub = {}
      for token in token_list
        token.a = idx
        token.b = idx+1
        stub[token.mx_hash.hash_key] = [token]
        stub['*'] = [token]
      @cache.push stub
      @drop.push {}
    
    list = @token_strict_rule(0)
    max_token = token_list_list.length
    
    filter_list = []
    for v in list
      filter_list.push v if v.b == max_token
    # Прим. А все ошибки, почему не прошло ... смотрим и анализируем @cache и @drop
    filter_list
  
  token_pre_op : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["pre_op"]
    
    node_list = []
    node_list.append @rule_XX_priorityE1__u1 start_pos
    node_list.append @rule_XX_priorityE1__u2 start_pos
    node_list.append @rule_XP_priorityE1__u3 start_pos
    
    FAcache = @cache[start_pos]["pre_op"] = node_list
    
    return FAcache
  
  token_bin_op : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["bin_op"]
    
    node_list = []
    node_list.append @rule_XSXXX_priorityE5__right_assocE1__u4 start_pos
    node_list.append @rule_XPXXX_priorityE6__right_assocE1__u5 start_pos
    node_list.append @rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 start_pos
    node_list.append @rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 start_pos
    
    FAcache = @cache[start_pos]["bin_op"] = node_list
    
    return FAcache
  
  token_access_rvalue : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["access_rvalue"]
    
    node_list = []
    node_list.append @rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 start_pos
    node_list.append @rule_Hhash_id_priorityEX9000_ultEhash_id__u9 start_pos
    node_list.append @rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 start_pos
    
    FAcache = @cache[start_pos]["access_rvalue"] = node_list
    
    return FAcache
  
  token_dollar_id : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["dollar_id"]
    
    node_list = []
    
    
    FAcache = @cache[start_pos]["dollar_id"] = node_list
    
    return FAcache
  
  token_hash_id : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["hash_id"]
    
    node_list = []
    
    
    FAcache = @cache[start_pos]["hash_id"] = node_list
    
    return FAcache
  
  token_rvalue : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["rvalue"]
    @drop[start_pos]["rvalue"] ?= -1
    @drop[start_pos]["rvalue"]++
    return [] if @drop[start_pos]["rvalue"]
    
    node_list = []
    node_list.append @rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 start_pos
    node_list.append @rule_Hnumber_priorityEX9000_ultEvalue__u11 start_pos
    node_list.append @rule_Hid_priorityEX9000_ultEwrap_string__u12 start_pos
    node_list.append @rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 start_pos
    node_list.append @rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 start_pos
    node_list.append @rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 start_pos
    node_list.append @rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 start_pos
    node_list.append @rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 start_pos
    node_list.append @rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 start_pos
    node_list.append @rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 start_pos
    node_list.append @rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 start_pos
    
    FAcache = @cache[start_pos]["rvalue"] = node_list
    if @drop[start_pos]["rvalue"]
      # recursive case
      for node in node_list
        node._is_new = true
      loop
        old_node_list = node_list
        node_list = []
        node_list.append @rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 start_pos, true
        node_list.append @rule_Hnumber_priorityEX9000_ultEvalue__u11 start_pos, true
        node_list.append @rule_Hid_priorityEX9000_ultEwrap_string__u12 start_pos, true
        node_list.append @rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 start_pos, true
        node_list.append @rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 start_pos, true
        node_list.append @rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 start_pos, true
        node_list.append @rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 start_pos, true
        node_list.append @rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 start_pos, true
        node_list.append @rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 start_pos, true
        node_list.append @rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 start_pos, true
        node_list.append @rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 start_pos, true
        break if node_list.length == 0
        
        for node in old_node_list
          node._is_new = false
        for node in node_list
          node._is_new = true
        
        FAcache.append node_list
    return FAcache
  
  token_number : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["number"]
    
    node_list = []
    
    
    FAcache = @cache[start_pos]["number"] = node_list
    
    return FAcache
  
  token_id : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["id"]
    
    node_list = []
    
    
    FAcache = @cache[start_pos]["id"] = node_list
    
    return FAcache
  
  token_string_literal_singleq : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["string_literal_singleq"]
    
    node_list = []
    
    
    FAcache = @cache[start_pos]["string_literal_singleq"] = node_list
    
    return FAcache
  
  token_string_literal_doubleq : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["string_literal_doubleq"]
    
    node_list = []
    
    
    FAcache = @cache[start_pos]["string_literal_doubleq"] = node_list
    
    return FAcache
  
  token_strict_rule : (start_pos)->
    if start_pos >= @cache.length
      ### !pragma coverage-skip-block ###
      return []
    return ret if ret = @cache[start_pos]["strict_rule"]
    
    node_list = []
    node_list.append @rule_Hrvalue_ultEdeep__u22 start_pos
    
    FAcache = @cache[start_pos]["strict_rule"] = node_list
    
    return FAcache
  
  # rule("pre_op", "\\!")                             .mx("priority=1")
  rule_XX_priorityE1__u1 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "pre_op"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "!"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_XX_priorityE1__u1"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "pre_op"
      mx_hash_stub["priority"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("pre_op", "\\-")                             .mx("priority=1")
  rule_XX_priorityE1__u2 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "pre_op"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "-"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_XX_priorityE1__u2"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "pre_op"
      mx_hash_stub["priority"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("pre_op", "\\+")                             .mx("priority=1")
  rule_XP_priorityE1__u3 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "pre_op"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "+"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_XP_priorityE1__u3"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "pre_op"
      mx_hash_stub["priority"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("bin_op", "\\*|\\/")                         .mx("priority=5  right_assoc=1")
  rule_XSXXX_priorityE5__right_assocE1__u4 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "bin_op"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    bak_hyp_list_0 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "*"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_0 = hyp_list
    hyp_list = bak_hyp_list_0
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "/"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    hyp_list = arr_merge a_hyp_list_0, hyp_list
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_XSXXX_priorityE5__right_assocE1__u4"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "bin_op"
      mx_hash_stub["priority"] = 5
      mx_hash_stub["right_assoc"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("bin_op", "\\+|\\-")                         .mx("priority=6  right_assoc=1")
  rule_XPXXX_priorityE6__right_assocE1__u5 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "bin_op"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    bak_hyp_list_1 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "+"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_1 = hyp_list
    hyp_list = bak_hyp_list_1
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "-"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    hyp_list = arr_merge a_hyp_list_1, hyp_list
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_XPXXX_priorityE6__right_assocE1__u5"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "bin_op"
      mx_hash_stub["priority"] = 6
      mx_hash_stub["right_assoc"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("bin_op", "'<'|'<='|'>'|'>='|'!='|'<>'|'=='").mx("priority=9")
  rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "bin_op"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    bak_hyp_list_2 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '<'
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_2 = hyp_list
    hyp_list = bak_hyp_list_2
    bak_hyp_list_3 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '<='
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_3 = hyp_list
    hyp_list = bak_hyp_list_3
    bak_hyp_list_4 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '>'
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_4 = hyp_list
    hyp_list = bak_hyp_list_4
    bak_hyp_list_5 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '>='
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_5 = hyp_list
    hyp_list = bak_hyp_list_5
    bak_hyp_list_6 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '!='
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_6 = hyp_list
    hyp_list = bak_hyp_list_6
    bak_hyp_list_7 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '<>'
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_7 = hyp_list
    hyp_list = bak_hyp_list_7
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '=='
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    hyp_list = arr_merge a_hyp_list_7, hyp_list
    
    hyp_list = arr_merge a_hyp_list_6, hyp_list
    
    hyp_list = arr_merge a_hyp_list_5, hyp_list
    
    hyp_list = arr_merge a_hyp_list_4, hyp_list
    
    hyp_list = arr_merge a_hyp_list_3, hyp_list
    
    hyp_list = arr_merge a_hyp_list_2, hyp_list
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "bin_op"
      mx_hash_stub["priority"] = 9
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("bin_op", "'&'|'&&'|'|'|'||'")               .mx("priority=10 right_assoc=1")
  rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "bin_op"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    bak_hyp_list_8 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '&'
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_8 = hyp_list
    hyp_list = bak_hyp_list_8
    bak_hyp_list_9 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '&&'
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_9 = hyp_list
    hyp_list = bak_hyp_list_9
    bak_hyp_list_10 = hyp_list
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '|'
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    a_hyp_list_10 = hyp_list
    hyp_list = bak_hyp_list_10
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != '||'
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    hyp_list = arr_merge a_hyp_list_10, hyp_list
    
    hyp_list = arr_merge a_hyp_list_9, hyp_list
    
    hyp_list = arr_merge a_hyp_list_8, hyp_list
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "bin_op"
      mx_hash_stub["priority"] = 10
      mx_hash_stub["right_assoc"] = 1
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("access_rvalue", "#dollar_id")               .mx("priority=-9000 ult=dollar_id")
  rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "access_rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_dollar_id hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "access_rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "dollar_id"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("access_rvalue", "#hash_id")                 .mx("priority=-9000 ult=hash_id")
  rule_Hhash_id_priorityEX9000_ultEhash_id__u9 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "access_rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_hash_id hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_Hhash_id_priorityEX9000_ultEhash_id__u9"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "access_rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "hash_id"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("access_rvalue", "#hash_id \\[ #number \\]") .mx("priority=-9000 ult=hash_array_access")
  rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "access_rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_hash_id hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "["
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_number hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "]"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "access_rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "hash_array_access"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#access_rvalue")                  .mx("priority=-9000 ult=access_rvalue")
  rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_access_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "access_rvalue"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#number")                         .mx("priority=-9000 ult=value")
  rule_Hnumber_priorityEX9000_ultEvalue__u11 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_number hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Hnumber_priorityEX9000_ultEvalue__u11"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "value"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#id")                             .mx("priority=-9000 ult=wrap_string")
  rule_Hid_priorityEX9000_ultEwrap_string__u12 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_id hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Hid_priorityEX9000_ultEwrap_string__u12"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "wrap_string"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#string_literal_singleq")         .mx("priority=-9000 ult=value")
  rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_string_literal_singleq hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "value"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#string_literal_doubleq")         .mx("priority=-9000 ult=value")
  rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_string_literal_doubleq hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "value"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#rvalue #bin_op #rvalue")         .mx("priority=#bin_op.priority ult=bin_op")       .strict("#rvalue[1].priority<#bin_op.priority #rvalue[2].priority<#bin_op.priority")
  rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_bin_op hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      continue if !((arg_list[0].mx_hash.priority<arg_list[1].mx_hash.priority))
      continue if !((arg_list[2].mx_hash.priority<arg_list[1].mx_hash.priority))
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = arg_list[1].mx_hash.priority
      mx_hash_stub["ult"] = "bin_op"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#rvalue #bin_op #rvalue")         .mx("priority=#bin_op.priority ult=bin_op")       .strict("#rvalue[1].priority==#bin_op.priority #rvalue[2].priority<#bin_op.priority #bin_op.right_assoc")
  rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_bin_op hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      continue if !((arg_list[0].mx_hash.priority==arg_list[1].mx_hash.priority))
      continue if !((arg_list[2].mx_hash.priority<arg_list[1].mx_hash.priority))
      continue if !(arg_list[1].mx_hash.right_assoc)
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = arg_list[1].mx_hash.priority
      mx_hash_stub["ult"] = "bin_op"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#pre_op #rvalue")                 .mx("priority=#pre_op.priority ult=pre_op")       .strict("#rvalue[1].priority<=#pre_op.priority")
  rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_pre_op hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      continue if !((arg_list[1].mx_hash.priority<=arg_list[0].mx_hash.priority))
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = arg_list[0].mx_hash.priority
      mx_hash_stub["ult"] = "pre_op"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "\\( #rvalue \\)")                 .mx("priority=-9000 ult=bra")
  rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "("
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != ")"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "bra"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#access_rvalue \\[ #number \\: #number \\]").mx("priority=-9000 ult=slice_access")
  rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_access_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "["
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_number hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != ":"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_number hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "]"
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "slice_access"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("rvalue", "#access_rvalue \\. #id")          .mx("priority=-9000 ult=field_access")
  rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "rvalue"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_access_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp_base in prev_hyp_list
      loop
        break if !token_list = @cache[hyp_base.b]?['*']
        for token in token_list
          break if token.value != "."
          hyp = hyp_base.clone()
          hyp.push {
            token
            label : undefined
          }
          hyp_list.push hyp
        break
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_id hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      if only_new
        continue if !hyp._is_new
      node = new Node
      node.mx_hash.rule = "rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "rvalue"
      mx_hash_stub["priority"] = -9000
      mx_hash_stub["ult"] = "field_access"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  
  # rule("strict_rule", "#rvalue")                    .mx("ult=deep")
  rule_Hrvalue_ultEdeep__u22 : (start_pos, only_new = false)->
    group_idx = 1
    
    zero_hyp = new Hypothesis
    zero_hyp.ret_hash = "strict_rule"
    zero_hyp.a = start_pos
    zero_hyp.b = start_pos
    hyp_list = [zero_hyp.clone()]
    
    prev_hyp_list = hyp_list
    hyp_list = []
    for hyp in prev_hyp_list
      for append_me in @token_rvalue hyp.b
        hyp_add = hyp.clone()
        hyp_add.push {
          token : append_me
          label : 'TODO_tok_pos'
        }
        hyp_list.push hyp_add
    
    
    node_list = []
    for hyp in hyp_list
      
      node = new Node
      node.mx_hash.rule = "rule_Hrvalue_ultEdeep__u22"
      vv_list = []
      for obj in hyp.list
        # TODO obj.label -> hash_pos_idx
        node.value_array.push obj.token
        vv_list.push obj.token.value_view or obj.token.value
      node.value_view = vv_list.join ' '
      
      arg_list = node.value_array
      
      
      mx_hash_stub = node.mx_hash
      mx_hash_stub.hash_key = "strict_rule"
      mx_hash_stub["ult"] = "deep"
      
      node.a = node.value_array[0].a
      node.b = node.value_array.last().b
      
      node_list.push node
    
    return node_list
  

# ###################################################################################################
parser = new module.Parser

@parse = (str)->
  tok_list = tokenizer.go str
  res_list = parser.go tok_list

# debug
@tokenizer = tokenizer
@parser = parser
