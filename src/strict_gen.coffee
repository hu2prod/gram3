# WARNING!!! AUTOGENERATED with gen_strict.coffee
module = @
{
  Tokenizer
  Token_parser
} = require './tokenizer'
tokenizer = new Tokenizer
tokenizer.parser_list.push (new Token_parser 'dollar_id', /^\$[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'hash_id', /^\#[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'pass_id', /^\@[_a-z0-9]+/i)
tokenizer.parser_list.push (new Token_parser 'id', /^[_a-z][_a-z0-9]*/i)
tokenizer.parser_list.push (new Token_parser '_bin_op', /// ^ (
  (&&?|\|\|?|[-+*/])|
  <>|[<>!=]=|<|>
) ///)
tokenizer.parser_list.push (new Token_parser '_pre_op', /^!/)
# tokenizer.parser_list.push (new Token_parser 'assign_bin_op', /^(&&?|\|\|?|[-+])?=/)
tokenizer.parser_list.push (new Token_parser 'bracket', /^[\[\]\(\)\{\}]/)
tokenizer.parser_list.push (new Token_parser 'delimiter', /^[:.]/)



string_regex_craft = ///
    \\[^xu] |               # x and u are case sensitive while hex letters are not
    \\x[0-9a-fA-F]{2} |     # Hexadecimal escape sequence
    \\u(?:
      [0-9a-fA-F]{4} |      # Unicode escape sequence
      \{(?:
        [0-9a-fA-F]{1,5} |  # Unicode code point escapes from 0 to FFFFF
        10[0-9a-fA-F]{4}    # Unicode code point escapes from 100000 to 10FFFF
      )\}
    )
///.toString().replace(/\//g,'')
single_quoted_regex_craft = ///
  (?:
    [^\\] |
    #{string_regex_craft}
  )*?
///.toString().replace(/\//g,'')
tokenizer.parser_list.push (new Token_parser 'string_literal_singleq'      , /// ^  ' #{single_quoted_regex_craft} '    ///)
double_quoted_regexp_craft = ///
  (?:
    [^\\#] |
    \#(?!\{) |
    #{string_regex_craft}
  )*?
///.toString().replace(/\//g,'')
tokenizer.parser_list.push (new Token_parser 'string_literal_doubleq'      , /// ^  " #{double_quoted_regexp_craft} "    ///)

tokenizer.parser_list.push (new Token_parser 'number', /^[0-9]+/)

# ###################################################################################################
#    gram
# ###################################################################################################

require 'fy'
drop_stub = []
for i in [0 ... 12]
  drop_stub.push 0
cache_stub = new Array 68

hash_key_list = [
  "_",
  "pre_op",
  "bin_op",
  "access_rvalue",
  "dollar_id",
  "hash_id",
  "rvalue",
  "number",
  "id",
  "string_literal_singleq",
  "string_literal_doubleq",
  "strict_rule"
]

class @Parser
  length: 0
  cache : []
  drop  : []
  Node  : null
  proxy : null
  
  go : (token_list_list)->
    @cache= []
    @drop = []
    @length = token_list_list.length
    return [] if @length == 0
    @Node = token_list_list[0]?[0]?.constructor
    @proxy= new @Node
    for token_list,idx in token_list_list
      stub = cache_stub.slice()
      for token in token_list
        token.a = idx
        token.b = idx+1
        if -1 != stub_idx = hash_key_list.idx token.mx_hash.hash_key
          stub[stub_idx] = [token]
        stub[0] = [token]
      @cache.push stub
      @drop.push drop_stub.slice()
    
    list = @fsm()
    max_token = token_list_list.length
    
    filter_list = []
    for v in list
      if v.b == max_token
        @node_fix v
        filter_list.push v
    # Прим. А все ошибки, почему не прошло ... смотрим и анализируем @cache
    filter_list
  
  node_fix : (node)->
    walk = (node)->
      vv_list = []
      for v in node.value_array
        walk v
        vv_list.push v.value_view or v.value
      node.value_view = vv_list.join ' '
      return
    walk node
    return

  fsm : ()->
    FAcache = @cache
    FAdrop = @drop
    stack = [
      [
        11
        0
        0
      ]
    ]
    length = @length
    
    while cur = stack.pop()
      [
        hki
        start_pos
        only_new
      ] = cur
      continue if start_pos >= length
      if !only_new
        continue if list = FAcache[start_pos][hki]
      
      switch hki
        when 0
          ### token__ queue ###
          
          stack.push [
            12
            start_pos
            0
          ]
        when 12
          ### token__ collect ###
          node_list = []
          
          FAcache[start_pos][0] = node_list
        
        when 1
          ### token_pre_op queue ###
          
          stack.push [
            19
            start_pos
            0
          ]
          ### rule_XX_priorityE1__u1 ###
          stack.push [
            13
            start_pos
            0
          ]
          ### rule_XX_priorityE1__u2 ###
          stack.push [
            15
            start_pos
            0
          ]
          ### rule_XP_priorityE1__u3 ###
          stack.push [
            17
            start_pos
            0
          ]
        when 19
          ### token_pre_op collect ###
          node_list = []
          ### rule_XX_priorityE1__u1 ###
          node_list.append FAcache[start_pos][13]
          ### rule_XX_priorityE1__u2 ###
          node_list.append FAcache[start_pos][15]
          ### rule_XP_priorityE1__u3 ###
          node_list.append FAcache[start_pos][17]
          FAcache[start_pos][1] = node_list
        
        when 2
          ### token_bin_op queue ###
          
          stack.push [
            28
            start_pos
            0
          ]
          ### rule_XSXXX_priorityE5__right_assocE1__u4 ###
          stack.push [
            20
            start_pos
            0
          ]
          ### rule_XPXXX_priorityE6__right_assocE1__u5 ###
          stack.push [
            22
            start_pos
            0
          ]
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 ###
          stack.push [
            24
            start_pos
            0
          ]
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 ###
          stack.push [
            26
            start_pos
            0
          ]
        when 28
          ### token_bin_op collect ###
          node_list = []
          ### rule_XSXXX_priorityE5__right_assocE1__u4 ###
          node_list.append FAcache[start_pos][20]
          ### rule_XPXXX_priorityE6__right_assocE1__u5 ###
          node_list.append FAcache[start_pos][22]
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 ###
          node_list.append FAcache[start_pos][24]
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 ###
          node_list.append FAcache[start_pos][26]
          FAcache[start_pos][2] = node_list
        
        when 3
          ### token_access_rvalue queue ###
          
          stack.push [
            35
            start_pos
            0
          ]
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 ###
          stack.push [
            29
            start_pos
            0
          ]
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 ###
          stack.push [
            31
            start_pos
            0
          ]
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 ###
          stack.push [
            33
            start_pos
            0
          ]
        when 35
          ### token_access_rvalue collect ###
          node_list = []
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 ###
          node_list.append FAcache[start_pos][29]
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 ###
          node_list.append FAcache[start_pos][31]
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 ###
          node_list.append FAcache[start_pos][33]
          FAcache[start_pos][3] = node_list
        
        when 4
          ### token_dollar_id queue ###
          
          stack.push [
            36
            start_pos
            0
          ]
        when 36
          ### token_dollar_id collect ###
          node_list = []
          
          FAcache[start_pos][4] = node_list
        
        when 5
          ### token_hash_id queue ###
          
          stack.push [
            37
            start_pos
            0
          ]
        when 37
          ### token_hash_id collect ###
          node_list = []
          
          FAcache[start_pos][5] = node_list
        
        when 6
          ### token_rvalue queue ###
          if FAdrop[start_pos][6]
            FAcache[start_pos][6] ?= []
            continue
          FAdrop[start_pos][6] = 1
          stack.push [
            60
            start_pos
            0
          ]
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 ###
          stack.push [
            38
            start_pos
            0
          ]
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 ###
          stack.push [
            40
            start_pos
            0
          ]
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 ###
          stack.push [
            42
            start_pos
            0
          ]
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 ###
          stack.push [
            44
            start_pos
            0
          ]
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 ###
          stack.push [
            46
            start_pos
            0
          ]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 ###
          stack.push [
            48
            start_pos
            0
          ]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 ###
          stack.push [
            50
            start_pos
            0
          ]
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 ###
          stack.push [
            52
            start_pos
            0
          ]
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 ###
          stack.push [
            54
            start_pos
            0
          ]
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 ###
          stack.push [
            56
            start_pos
            0
          ]
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 ###
          stack.push [
            58
            start_pos
            0
          ]
        when 60
          ### token_rvalue collect ###
          node_list = []
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 ###
          node_list.append FAcache[start_pos][38]
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 ###
          node_list.append FAcache[start_pos][40]
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 ###
          node_list.append FAcache[start_pos][42]
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 ###
          node_list.append FAcache[start_pos][44]
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 ###
          node_list.append FAcache[start_pos][46]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 ###
          node_list.append FAcache[start_pos][48]
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 ###
          node_list.append FAcache[start_pos][50]
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 ###
          node_list.append FAcache[start_pos][52]
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 ###
          node_list.append FAcache[start_pos][54]
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 ###
          node_list.append FAcache[start_pos][56]
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 ###
          node_list.append FAcache[start_pos][58]
          for node in node_list
            node._is_new = true
          if append_list = FAcache[start_pos][6]
            for node in append_list
              node._is_new = false
            append_list.uappend node_list
          else
            FAcache[start_pos][6] = node_list
          if FAdrop[start_pos][6]
            if node_list.last()?._is_new
              # recursive case
              stack.push [
                60
                start_pos
                1
              ]
              ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 ###
              stack.push [
                48
                start_pos
                1
              ]
              ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 ###
              stack.push [
                50
                start_pos
                1
              ]
              ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 ###
              stack.push [
                54
                start_pos
                1
              ]
        
        when 7
          ### token_number queue ###
          
          stack.push [
            61
            start_pos
            0
          ]
        when 61
          ### token_number collect ###
          node_list = []
          
          FAcache[start_pos][7] = node_list
        
        when 8
          ### token_id queue ###
          
          stack.push [
            62
            start_pos
            0
          ]
        when 62
          ### token_id collect ###
          node_list = []
          
          FAcache[start_pos][8] = node_list
        
        when 9
          ### token_string_literal_singleq queue ###
          
          stack.push [
            63
            start_pos
            0
          ]
        when 63
          ### token_string_literal_singleq collect ###
          node_list = []
          
          FAcache[start_pos][9] = node_list
        
        when 10
          ### token_string_literal_doubleq queue ###
          
          stack.push [
            64
            start_pos
            0
          ]
        when 64
          ### token_string_literal_doubleq collect ###
          node_list = []
          
          FAcache[start_pos][10] = node_list
        
        when 11
          ### token_strict_rule queue ###
          
          stack.push [
            67
            start_pos
            0
          ]
          ### rule_Hrvalue_ultEdeep__u22 ###
          stack.push [
            65
            start_pos
            0
          ]
        when 67
          ### token_strict_rule collect ###
          node_list = []
          ### rule_Hrvalue_ultEdeep__u22 ###
          node_list.append FAcache[start_pos][65]
          FAcache[start_pos][11] = node_list
        
        when 13
          ### rule_XX_priorityE1__u1 queue ###
          chk_len = stack.push [
            13
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 14
        when 14
          ### rule_XX_priorityE1__u1 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "!"
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XX_priorityE1__u1"
            
            mx_hash_stub.hash_key = "pre_op"
            mx_hash_stub.hash_key_idx = 1
            mx_hash_stub["priority"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][13] = ret_list
        when 15
          ### rule_XX_priorityE1__u2 queue ###
          chk_len = stack.push [
            15
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 16
        when 16
          ### rule_XX_priorityE1__u2 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "-"
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XX_priorityE1__u2"
            
            mx_hash_stub.hash_key = "pre_op"
            mx_hash_stub.hash_key_idx = 1
            mx_hash_stub["priority"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][15] = ret_list
        when 17
          ### rule_XP_priorityE1__u3 queue ###
          chk_len = stack.push [
            17
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 18
        when 18
          ### rule_XP_priorityE1__u3 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "+"
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XP_priorityE1__u3"
            
            mx_hash_stub.hash_key = "pre_op"
            mx_hash_stub.hash_key_idx = 1
            mx_hash_stub["priority"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][17] = ret_list
        when 20
          ### rule_XSXXX_priorityE5__right_assocE1__u4 queue ###
          chk_len = stack.push [
            20
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "*"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "/"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 21
        when 21
          ### rule_XSXXX_priorityE5__right_assocE1__u4 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "*"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "/"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XSXXX_priorityE5__right_assocE1__u4"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 5
            mx_hash_stub["right_assoc"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.length -= tok_list.length
          FAcache[start_pos][20] = ret_list
        when 22
          ### rule_XPXXX_priorityE6__right_assocE1__u5 queue ###
          chk_len = stack.push [
            22
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "+"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "-"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 23
        when 23
          ### rule_XPXXX_priorityE6__right_assocE1__u5 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "+"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "-"
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XPXXX_priorityE6__right_assocE1__u5"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 6
            mx_hash_stub["right_assoc"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.length -= tok_list.length
          FAcache[start_pos][22] = ret_list
        when 24
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 queue ###
          chk_len = stack.push [
            24
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '<'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '<='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '>='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '!='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '<>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '=='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 25
        when 25
          ### rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '<'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '<='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '>='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '!='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '<>'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '=='
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XXXXXXEXXXXXXXXEXXXXEXXXXXXXXEEX_priorityE9__u6"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 9
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.length -= tok_list.length
          FAcache[start_pos][24] = ret_list
        when 26
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 queue ###
          chk_len = stack.push [
            26
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '&&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '|'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '||'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            
            
            node.value_array.length -= tok_list.length
          if chk_len == stack.length
            stack[chk_len-1][0] = 27
        when 27
          ### rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          hyp_list_1 = []
          old_node = node
          node = @proxy
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '&&'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '|'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != '||'
            b_1 = tok.b
            node.value_array.push tok
            
            hyp_list_1.push node.value_array.clone()
            
            node.value_array.pop()
          node = old_node
          
          for tok_list in hyp_list_1
            node.value_array.append tok_list
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_XXXXXXXXXXXXXXXXX_priorityE10_right_assocE1__u7"
            
            mx_hash_stub.hash_key = "bin_op"
            mx_hash_stub.hash_key_idx = 2
            mx_hash_stub["priority"] = 10
            mx_hash_stub["right_assoc"] = 1
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.length -= tok_list.length
          FAcache[start_pos][26] = ret_list
        when 29
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 queue ###
          chk_len = stack.push [
            29
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][4]
          if !list_1
            stack.push [
              4
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 30
        when 30
          ### rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][4]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hdollar_id_priorityEX9000_ultEdollar_id__u8"
            
            mx_hash_stub.hash_key = "access_rvalue"
            mx_hash_stub.hash_key_idx = 3
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "dollar_id"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][29] = ret_list
        when 31
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 queue ###
          chk_len = stack.push [
            31
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][5]
          if !list_1
            stack.push [
              5
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 32
        when 32
          ### rule_Hhash_id_priorityEX9000_ultEhash_id__u9 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][5]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hhash_id_priorityEX9000_ultEhash_id__u9"
            
            mx_hash_stub.hash_key = "access_rvalue"
            mx_hash_stub.hash_key_idx = 3
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "hash_id"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][31] = ret_list
        when 33
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 queue ###
          chk_len = stack.push [
            33
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][5]
          if !list_1
            stack.push [
              5
              b_0
              0
            ]
            continue
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][7]
              if !list_3
                stack.push [
                  7
                  b_2
                  0
                ]
                continue
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 34
        when 34
          ### rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][5]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][7]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                continue if b_3 >= length
                list_4 = FAcache[b_3][0]
                for tok in list_4
                  continue if tok.value != "]"
                  b_4 = tok.b
                  node.value_array.push tok
                  
                  arg_list = node.value_array
                  
                  
                  mx_hash_stub = node.mx_hash = {}
                  mx_hash_stub.rule = "rule_Hhash_id_XX_Hnumber_XX_priorityEX9000_ultEhash_array_access__u19"
                  
                  mx_hash_stub.hash_key = "access_rvalue"
                  mx_hash_stub.hash_key_idx = 3
                  mx_hash_stub["priority"] = -9000
                  mx_hash_stub["ult"] = "hash_array_access"
                  
                  node.b = node.value_array.last().b
                  
                  ret_list.push node.clone()
                  
                  
                  node.value_array.pop()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcache[start_pos][33] = ret_list
        when 38
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 queue ###
          chk_len = stack.push [
            38
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][3]
          if !list_1
            stack.push [
              3
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 39
        when 39
          ### rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][3]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Haccess_rvalue_priorityEX9000_ultEaccess_rvalue__u10"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "access_rvalue"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][38] = ret_list
        when 40
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 queue ###
          chk_len = stack.push [
            40
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][7]
          if !list_1
            stack.push [
              7
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 41
        when 41
          ### rule_Hnumber_priorityEX9000_ultEvalue__u11 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][7]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hnumber_priorityEX9000_ultEvalue__u11"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "value"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][40] = ret_list
        when 42
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 queue ###
          chk_len = stack.push [
            42
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][8]
          if !list_1
            stack.push [
              8
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 43
        when 43
          ### rule_Hid_priorityEX9000_ultEwrap_string__u12 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][8]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hid_priorityEX9000_ultEwrap_string__u12"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "wrap_string"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][42] = ret_list
        when 44
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 queue ###
          chk_len = stack.push [
            44
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][9]
          if !list_1
            stack.push [
              9
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 45
        when 45
          ### rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][9]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hstring_literal_singleq_priorityEX9000_ultEvalue__u13"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "value"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][44] = ret_list
        when 46
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 queue ###
          chk_len = stack.push [
            46
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][10]
          if !list_1
            stack.push [
              10
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 47
        when 47
          ### rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][10]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hstring_literal_doubleq_priorityEX9000_ultEvalue__u14"
            
            mx_hash_stub.hash_key = "rvalue"
            mx_hash_stub.hash_key_idx = 6
            mx_hash_stub["priority"] = -9000
            mx_hash_stub["ult"] = "value"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][46] = ret_list
        when 48
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 queue ###
          chk_len = stack.push [
            48
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][6]
          if !list_1
            stack.push [
              6
              b_0
              0
            ]
            continue
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][2]
            if !list_2
              stack.push [
                2
                b_1
                0
              ]
              continue
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][6]
              if !list_3
                stack.push [
                  6
                  b_2
                  0
                ]
                continue
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 49
        when 49
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][6]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][2]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][6]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                if !((arg_list[0].mx_hash.priority<arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                if !((arg_list[2].mx_hash.priority<arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityXHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_u15"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = arg_list[1].mx_hash.priority
                mx_hash_stub["ult"] = "bin_op"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcache[start_pos][48] = ret_list
        when 50
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 queue ###
          chk_len = stack.push [
            50
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][6]
          if !list_1
            stack.push [
              6
              b_0
              0
            ]
            continue
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][2]
            if !list_2
              stack.push [
                2
                b_1
                0
              ]
              continue
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][6]
              if !list_3
                stack.push [
                  6
                  b_2
                  0
                ]
                continue
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 51
        when 51
          ### rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][6]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][2]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][6]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                if !((arg_list[0].mx_hash.priority==arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                if !((arg_list[2].mx_hash.priority<arg_list[1].mx_hash.priority))
                  node.value_array.pop()
                  continue
                if !(arg_list[1].mx_hash.right_assoc)
                  node.value_array.pop()
                  continue
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_HrvalueX1XXpriorityEEHbin_opXpriority_HrvalueX2XXpriorityXHbin_opXpriority_Hbin_opXright_assoc_u16"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = arg_list[1].mx_hash.priority
                mx_hash_stub["ult"] = "bin_op"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcache[start_pos][50] = ret_list
        when 52
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 queue ###
          chk_len = stack.push [
            52
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][1]
          if !list_1
            stack.push [
              1
              b_0
              0
            ]
            continue
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][6]
            if !list_2
              stack.push [
                6
                b_1
                0
              ]
              continue
            
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 53
        when 53
          ### rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][1]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][6]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              arg_list = node.value_array
              if !((arg_list[1].mx_hash.priority<=arg_list[0].mx_hash.priority))
                node.value_array.pop()
                continue
              
              mx_hash_stub = node.mx_hash = {}
              mx_hash_stub.rule = "rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u17"
              
              mx_hash_stub.hash_key = "rvalue"
              mx_hash_stub.hash_key_idx = 6
              mx_hash_stub["priority"] = arg_list[0].mx_hash.priority
              mx_hash_stub["ult"] = "pre_op"
              
              node.b = node.value_array.last().b
              
              ret_list.push node.clone()
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcache[start_pos][52] = ret_list
        when 54
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 queue ###
          chk_len = stack.push [
            54
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "("
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][6]
            if !list_2
              stack.push [
                6
                b_1
                0
              ]
              continue
            
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 55
        when 55
          ### rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][0]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            continue if tok.value != "("
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][6]
            for tok in list_2
              
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][0]
              for tok in list_3
                continue if tok.value != ")"
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_XX_Hrvalue_XX_priorityEX9000_ultEbra__u18"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = -9000
                mx_hash_stub["ult"] = "bra"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcache[start_pos][54] = ret_list
        when 56
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 queue ###
          chk_len = stack.push [
            56
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][3]
          if !list_1
            stack.push [
              3
              b_0
              0
            ]
            continue
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][7]
              if !list_3
                stack.push [
                  7
                  b_2
                  0
                ]
                continue
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                continue if b_3 >= length
                list_4 = FAcache[b_3][0]
                for tok in list_4
                  continue if tok.value != ":"
                  b_4 = tok.b
                  node.value_array.push tok
                  
                  continue if b_4 >= length
                  list_5 = FAcache[b_4][7]
                  if !list_5
                    stack.push [
                      7
                      b_4
                      0
                    ]
                    continue
                  
                  
                  node.value_array.pop()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 57
        when 57
          ### rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][3]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "["
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][7]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                continue if b_3 >= length
                list_4 = FAcache[b_3][0]
                for tok in list_4
                  continue if tok.value != ":"
                  b_4 = tok.b
                  node.value_array.push tok
                  
                  continue if b_4 >= length
                  list_5 = FAcache[b_4][7]
                  for tok in list_5
                    
                    b_5 = tok.b
                    node.value_array.push tok
                    
                    continue if b_5 >= length
                    list_6 = FAcache[b_5][0]
                    for tok in list_6
                      continue if tok.value != "]"
                      b_6 = tok.b
                      node.value_array.push tok
                      
                      arg_list = node.value_array
                      
                      
                      mx_hash_stub = node.mx_hash = {}
                      mx_hash_stub.rule = "rule_Haccess_rvalue_XX_Hnumber_XX_Hnumber_XX_priorityEX9000_ultEslice_access__u20"
                      
                      mx_hash_stub.hash_key = "rvalue"
                      mx_hash_stub.hash_key_idx = 6
                      mx_hash_stub["priority"] = -9000
                      mx_hash_stub["ult"] = "slice_access"
                      
                      node.b = node.value_array.last().b
                      
                      ret_list.push node.clone()
                      
                      
                      node.value_array.pop()
                    
                    node.value_array.pop()
                  
                  node.value_array.pop()
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcache[start_pos][56] = ret_list
        when 58
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 queue ###
          chk_len = stack.push [
            58
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][3]
          if !list_1
            stack.push [
              3
              b_0
              0
            ]
            continue
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "."
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][8]
              if !list_3
                stack.push [
                  8
                  b_2
                  0
                ]
                continue
              
              
              node.value_array.pop()
            
            node.value_array.pop()
          if chk_len == stack.length
            stack[chk_len-1][0] = 59
        when 59
          ### rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][3]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            continue if b_1 >= length
            list_2 = FAcache[b_1][0]
            for tok in list_2
              continue if tok.value != "."
              b_2 = tok.b
              node.value_array.push tok
              
              continue if b_2 >= length
              list_3 = FAcache[b_2][8]
              for tok in list_3
                
                b_3 = tok.b
                node.value_array.push tok
                
                arg_list = node.value_array
                
                
                mx_hash_stub = node.mx_hash = {}
                mx_hash_stub.rule = "rule_Haccess_rvalue_XX_Hid_priorityEX9000_ultEfield_access__u21"
                
                mx_hash_stub.hash_key = "rvalue"
                mx_hash_stub.hash_key_idx = 6
                mx_hash_stub["priority"] = -9000
                mx_hash_stub["ult"] = "field_access"
                
                node.b = node.value_array.last().b
                
                ret_list.push node.clone()
                
                
                node.value_array.pop()
              
              node.value_array.pop()
            
            node.value_array.pop()
          FAcache[start_pos][58] = ret_list
        when 65
          ### rule_Hrvalue_ultEdeep__u22 queue ###
          chk_len = stack.push [
            65
            start_pos
            only_new
          ]
          ret_list = []
          b_0 = start_pos
          node = new @Node
          
          list_1 = FAcache[b_0][6]
          if !list_1
            stack.push [
              6
              b_0
              0
            ]
            continue
          
          if chk_len == stack.length
            stack[chk_len-1][0] = 66
        when 66
          ### rule_Hrvalue_ultEdeep__u22 collect ###
          ret_list = []
          b_0 = start_pos
          node = new @Node
          node.a = start_pos
          
          list_1 = FAcache[b_0][6]
          for tok in list_1
            if only_new
              continue if !tok._is_new
            
            b_1 = tok.b
            node.value_array.push tok
            
            arg_list = node.value_array
            
            
            mx_hash_stub = node.mx_hash = {}
            mx_hash_stub.rule = "rule_Hrvalue_ultEdeep__u22"
            
            mx_hash_stub.hash_key = "strict_rule"
            mx_hash_stub.hash_key_idx = 11
            mx_hash_stub["ult"] = "deep"
            
            node.b = node.value_array.last().b
            
            ret_list.push node.clone()
            
            
            node.value_array.pop()
          FAcache[start_pos][65] = ret_list
    
    FAcache[start_pos][11]

# ###################################################################################################
parser = new module.Parser

@parse = (str)->
  tok_list = tokenizer.go str
  res_list = parser.go tok_list

# debug
@tokenizer = tokenizer
@parser = parser
