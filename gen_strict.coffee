#!/usr/bin/env iced
### !pragma coverage-skip-block ###
require 'fy'
fs = require 'fs'

{
  Gram_scope
} = require './src/rule'

tokenizer_code = fs.readFileSync './tok_strict.coffee.template'

# ###################################################################################################
#    gram
# ###################################################################################################
gs = new Gram_scope
gs.expected_token = 'strict_rule'
q = (a, b)->gs.rule a,b

base_priority = -9000
q('pre_op',  '\\!')                                     .mx('priority=1')
q('pre_op',  '\\-')                                     .mx('priority=1')
q('pre_op',  '\\+')                                     .mx('priority=1')

q('bin_op',  "\\*|\\/")                                 .mx('priority=5  right_assoc=1')
q('bin_op',  "\\+|\\-")                                 .mx('priority=6  right_assoc=1')
q('bin_op',  "'<'|'<='|'>'|'>='|'!='|'<>'|'=='")        .mx('priority=9')
q('bin_op',  "'&'|'&&'|'|'|'||'")                       .mx('priority=10 right_assoc=1')
# and|or


q('access_rvalue',  '#dollar_id')                       .mx("priority=#{base_priority} ult=dollar_id")
q('access_rvalue',  '#hash_id')                         .mx("priority=#{base_priority} ult=hash_id")
q('rvalue',  '#access_rvalue')                          .mx("priority=#{base_priority} ult=access_rvalue")

# q('rvalue',  '#pass_id')                                .mx("priority=#{base_priority} ult=dollar_id")

q('rvalue',  '#number')                                 .mx("priority=#{base_priority} ult=value")
q('rvalue',  '#id')                                     .mx("priority=#{base_priority} ult=wrap_string")
q('rvalue',  '#string_literal_singleq')                 .mx("priority=#{base_priority} ult=value")
q('rvalue',  '#string_literal_doubleq')                 .mx("priority=#{base_priority} ult=value")


q('rvalue',  '#rvalue #bin_op #rvalue')                 .mx('priority=#bin_op.priority ult=bin_op')   .strict('#rvalue[1].priority<#bin_op.priority #rvalue[2].priority<#bin_op.priority')
# q('rvalue',  '#rvalue #bin_op #rvalue')                 .mx('priority=#bin_op.priority ult=bin_op')   .strict('#rvalue[1].priority<#bin_op.priority #rvalue[2].priority=#bin_op.priority #bin_op.left_assoc')
q('rvalue',  '#rvalue #bin_op #rvalue')                 .mx('priority=#bin_op.priority ult=bin_op')   .strict('#rvalue[1].priority==#bin_op.priority #rvalue[2].priority<#bin_op.priority #bin_op.right_assoc')

q('rvalue',  '#pre_op #rvalue')                         .mx('priority=#pre_op.priority ult=pre_op')   .strict('#rvalue[1].priority<=#pre_op.priority')

q('rvalue',  '\\( #rvalue \\)')                         .mx("priority=#{base_priority} ult=bra")

# пока не поддерживается
# на самом деле никогда не поддерживалось
# q('access_rvalue', '#hash_id \\[ #rvalue \\]')          .mx("priority=#{base_priority} ult=hash_array_access")
q('access_rvalue', '#hash_id \\[ #number \\]')          .mx("priority=#{base_priority} ult=hash_array_access")
q('rvalue', '#access_rvalue \\[ #number \\: #number \\]').mx("priority=#{base_priority} ult=slice_access")
# . access
q('rvalue', '#access_rvalue \\. #id')                   .mx("priority=#{base_priority} ult=field_access")

q('strict_rule', '#rvalue')                             .mx("ult=deep")

gram_code = gs.compile
  gram_module : './node'

code = """
# WARNING!!! AUTOGENERATED with gen_strict.coffee
module = @
{
  Tokenizer
  Token_parser
} = require './tokenizer'
#{tokenizer_code}

# ###################################################################################################
#    gram
# ###################################################################################################

#{gram_code}

# ###################################################################################################
parser = new module.Parser

@parse = (str)->
  tok_list = tokenizer.go str
  res_list = parser.go tok_list

# debug
@tokenizer = tokenizer
@parser = parser

"""

fs.writeFileSync './src/strict_gen.coffee', code
fs.writeFileSync './src/strict_gen_for_coverage.coffee', code